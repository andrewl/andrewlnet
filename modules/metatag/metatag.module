<?php

/**
 * @file
 * Contains metatag.module.
 */

// Used by hook_help().
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_help().
 */
function metatag_help($route_name, RouteMatchInterface $route_match) {
  $output = '';
  switch ($route_name) {
    // Main module help for the Metatag module.
    case 'help.page.metatag':
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('This module allows you to automatically provide structured metadata, aka "meta
tags", about your website and web pages.') . '</p>';
      break;
  }

  return $output;
}

/**
 * Implements hook_form_alter().
 */
function metatag_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Disable the cardinality option on the field storage settings form for
  // metatag fields.
  if ($form_id == 'field_ui_field_storage_edit_form') {
    if ($form['#field']->getType() == 'metatag') {
      $form['field_storage']['cardinality_container']['#prefix'] = t("Metatag fields must be singular.");
      $form['field_storage']['cardinality_container']['#disabled'] = TRUE;
      $form['field_storage']['cardinality_container']['cardinality']['#disabled'] = TRUE;
      $form['field_storage']['cardinality_container']['cardinality_number']['#disabled'] = TRUE;
      unset($form['field_storage']['cardinality_container']['cardinality_number']['#states']);
    }
  }
}

/**
 * Implements hook_page_attachments().
 *
 * Load all meta tags for this page.
 */
function metatag_page_attachments(array &$attachments) {
  $metatag_attachments = drupal_static('metatag_attachments');

  if (is_null($metatag_attachments)) {
    // Load the meta tags from the route.
    $metatag_attachments = metatag_get_tags_from_route();

    // If any Metatag items were found, append them.
    if (!empty($metatag_attachments['#attached']['html_head'])) {
      if (empty($attachments['#attached'])) {
        $attachments['#attached'] = [];
      }
      if (empty($attachments['#attached']['html_head'])) {
        $attachments['#attached']['html_head'] = [];
      }
      foreach ($metatag_attachments['#attached']['html_head'] as $item) {
        $attachments['#attached']['html_head'][] = $item;
      }
    }
  }
}

/**
 * Identify whether a route is supported by the module.
 *
 * @param string $route_name
 *
 * @return bool
 */
function metatag_is_supported_route($route_name) {
  $supported = FALSE;

  // Look for a canonical entity view page, e.g. node/{nid}, user/{uid}, etc.
  $matches = array();

  preg_match('/entity\.(.*)\.canonical/', $route_name, $matches);
  if (!empty($matches[1])) {
    $supported = $matches[1];
  }

  return $supported;
}

/**
 * Implements template_preprocess_html().
 */
function metatag_preprocess_html(&$variables) {
  $attachments = drupal_static('metatag_attachments');

  if (is_null($attachments)) {
    $attachments = metatag_get_tags_from_route();
  }

  // Load the page title.
  if (!empty($attachments['#attached']['html_head'])) {
    foreach ($attachments['#attached']['html_head'] as $key => $attachment) {
      if (!empty($attachment[1]) && $attachment[1] == 'title') {
        // It's safe to access the value directly because it was already
        // processed in MetatagManager::generateElements().
        $variables['head_title_array'] = array();
        $variables['head_title']['title'] = $attachment[0]['#attributes']['content'];
        // Original:
        // $variables['head_title_array']['title'] = $attachment[0]['#attributes']['content'];
        // $variables['head_title'] = implode(' | ', $variables['head_title_array']);
        break;
      }
    }
  }

  // Add XML namespaces if the RDF module is not enabled as it adds these two
  // automatically.
  if (!isset($variables['html_attributes'])) {
    $variables['html_attributes'] = array();
  }
  $namespaces = [];
  if (!\Drupal::moduleHandler()->moduleExists('rdf')) {
    $namespaces = [
      'xmlns:dc' => 'http://purl.org/dc/terms/',
      'xmlns:og' => 'http://ogp.me/ns#',
    ];
  }

  // Namespaces for OpenGraph.
  $namespaces['xmlns:article'] = "http://ogp.me/ns/article#";
  $namespaces['xmlns:book'] = "http://ogp.me/ns/book#";
  $namespaces['xmlns:product'] = "http://ogp.me/ns/product#";
  $namespaces['xmlns:profile'] = "http://ogp.me/ns/profile#";
  $namespaces['xmlns:video'] = "http://ogp.me/ns/video#";

  // Namespaces for Google+.
  if (isset($variables['itemtype'])) {
    $namespaces['itemscope'] = '';
    $namespaces['itemtype'] = "http://schema.org/{$variables['itemtype']}";
  }

  // Append each namespace.
  foreach ($namespaces as $namespace => $uri) {
    $variables['html_attributes'][$namespace] = $uri;
  }
}

/**
 * Load the meta tags by processing the route parameters.
 *
 * @return array()
 *   All of the meta tags identified for the header.
 */
function metatag_get_tags_from_route() {
  $metatags = array();

  // Load the current route.
  $route_match = \Drupal::routeMatch();

  // Look for a canonical entity view page, e.g. node/{nid}, user/{uid}, etc.
  $entity_type = metatag_is_supported_route($route_match->getRouteName());

  // Only proceed if an entity was identified.
  if (!empty($entity_type)) {
    // Load the entity from the route's parameters.
    $entity = $route_match->getParameter($entity_type);

    // Get the manager service to do all the work.
    $manager = \Drupal::service('metatag.manager');

    // Assemble the attachments array from all the metatag plugins.
    $metatags = $manager->attachmentsFromEntity($entity);
  }

  return $metatags;
}
